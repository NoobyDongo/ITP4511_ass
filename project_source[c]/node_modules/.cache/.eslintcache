[{"C:\\Users\\szcch\\Documents\\GitHub\\ITP4511_ass\\project_source[c]\\src\\index.js":"1","C:\\Users\\szcch\\Documents\\GitHub\\ITP4511_ass\\project_source[c]\\src\\reportWebVitals.js":"2","C:\\Users\\szcch\\Documents\\GitHub\\ITP4511_ass\\project_source[c]\\src\\MainContainer\\MainContainer.jsx":"3","C:\\Users\\szcch\\Documents\\GitHub\\ITP4511_ass\\project_source[c]\\src\\Nav\\Nav.jsx":"4","C:\\Users\\szcch\\Documents\\GitHub\\ITP4511_ass\\project_source[c]\\src\\_functions.js":"5"},{"size":664,"mtime":1683210302571,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1682762246365,"results":"8","hashOfConfig":"7"},{"size":33450,"mtime":1683093809439,"results":"9","hashOfConfig":"7"},{"size":3548,"mtime":1683088252251,"results":"10","hashOfConfig":"7"},{"size":273,"mtime":1682769592975,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"1kb3dat",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"19"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"19"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"C:\\Users\\szcch\\Documents\\GitHub\\ITP4511_ass\\project_source[c]\\src\\index.js",["31","32"],[],"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport $ from 'jquery';\nimport reportWebVitals from './reportWebVitals';\nimport Cookies from 'js-cookie';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nimport Main from './MainContainer/MainContainer';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","C:\\Users\\szcch\\Documents\\GitHub\\ITP4511_ass\\project_source[c]\\src\\reportWebVitals.js",[],[],[],"C:\\Users\\szcch\\Documents\\GitHub\\ITP4511_ass\\project_source[c]\\src\\MainContainer\\MainContainer.jsx",["33","34","35","36","37","38","39","40","41","42","43","44"],[],"import React, { useEffect, useState } from 'react';\r\nimport logo from '../logo.svg';\r\nimport Cookies from 'js-cookie';\r\nimport $ from 'jquery';\r\nimport './MainContainer.css';\r\nimport './PromptContainer.css';\r\nimport Nav from '../Nav/Nav';\r\nimport moment from 'moment';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers';\r\nimport { AdapterMoment } from '@mui/x-date-pickers/AdapterMoment'\r\nimport { DatePicker } from '@mui/x-date-pickers';\r\nimport { TimePicker } from '@mui/x-date-pickers/TimePicker';\r\n\r\nvar key = 0;\r\nvar user = null;\r\n\r\nvar userid = Cookies.get('userid');\r\nconsole.log({ userid: userid })\r\n\r\nclass Input extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.o = props;\r\n  }\r\n\r\n  showTime() {\r\n\r\n  }\r\n  startBooking() {\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div key={key++}>\r\n        {this.o.text}<input placeholder={this.o.placeholder} id={this.o.id || null} key={key++} className={this.o.className || \"form-control\"} name={this.o.name} type={this.o.type || \"text\"} defaultValue={this.o.value} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\nclass Hidden extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.name = props.name || \"\"\r\n    this.value = props.value || \"\"\r\n  }\r\n  render() {\r\n    return (\r\n      <input type=\"hidden\" value={this.value} name={this.name} />\r\n    )\r\n  }\r\n}\r\nclass Button extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.o = props;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <button key={key++} className={this.props.disabled == true ? \"disabled button\" : \"button\"} onClick={this.props.action} t={this.props.type || \"main\"}>{this.props.text || \"Action\"}</button>\r\n    )\r\n  }\r\n}\r\nclass Icon extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.name = this.props.name || \"person\"\r\n    if (props.onClick)\r\n      this.click = props.onClick.bind(this)\r\n  }\r\n  render() {\r\n    return (\r\n      <span key={key++} onClick={this.click} className=\"material-symbols-rounded\">{this.name}</span>\r\n    )\r\n  }\r\n}\r\n\r\n$.putJSON = function (url, data, callback) {\r\n  return $.ajax({\r\n    headers: {\r\n      'Accept': 'application/json',\r\n      'Content-Type': 'application/json',\r\n      \"Access-Control-Allow-Origin\": \"*\"\r\n    },\r\n    'type': 'PUT',\r\n    'url': url,\r\n    'data': JSON.stringify(data),\r\n    'dataType': 'json',\r\n    'success': callback\r\n\r\n  }).fail(function (jqXHR, textStatus) {\r\n    DisplayMessage(\"Something Went Wrong...\")\r\n  });\r\n};\r\n$.postJSON = function (url, data, callback) {\r\n  return $.ajax({\r\n    headers: {\r\n      'Accept': 'application/json',\r\n      'Content-Type': 'application/json',\r\n      \"Access-Control-Allow-Origin\": \"*\"\r\n    },\r\n    'type': 'POST',\r\n    'url': url,\r\n    'data': JSON.stringify(data),\r\n    'dataType': 'json',\r\n    'success': callback\r\n\r\n  }).fail(function (jqXHR, textStatus) {\r\n    DisplayMessage(\"Something Went Wrong...\")\r\n  });\r\n};\r\n$.getJSON = function (url, callback) {\r\n  return $.ajax({\r\n    headers: {\r\n      \"Access-Control-Allow-Origin\": \"*\"\r\n    },\r\n    'type': 'GET',\r\n    'url': url,\r\n    'success': callback\r\n\r\n  }).fail(function (jqXHR, textStatus) {\r\n    DisplayMessage(\"Something Went Wrong...\")\r\n  });\r\n};\r\nasync function GetOneFrom(url, action) {\r\n  return fetch(url, {\r\n    headers: { \"Access-Control-Allow-Origin\": \"*\" }\r\n  })\r\n    .then((response) => {\r\n      if (response.status === 200) {\r\n        return response.json()\r\n      }\r\n    }).then((data) => {\r\n      if (data) {\r\n        action && action(data);\r\n      }\r\n    })\r\n}\r\nasync function GetAllFrom(url, action) {\r\n  return fetch(url, {\r\n    headers: { \"Access-Control-Allow-Origin\": \"*\" }\r\n  })\r\n    .then((response) => {\r\n      if (response.status === 200) {\r\n        return response.json()\r\n      }\r\n    }).then((data) => {\r\n      if (data) {\r\n        var result = []\r\n        for (var i in data) {\r\n          result.push(data[i])\r\n        }\r\n        action && action(result);\r\n      }\r\n    })\r\n}\r\nfunction CheckList(list, msg) {\r\n  return (list && list.length > 0) ? false : (<div className=\"empty\">{msg}</div>)\r\n}\r\nfunction DisplayMessage(msg) {\r\n  const m = $(\"#message\")\r\n  $(m).find(\"div\").html(msg);\r\n  $(m).animate({ opacity: 1 }, 300).delay(2500).animate({ opacity: 0 }, 500);\r\n}\r\nasync function LoginAccount(user, callback) {\r\n  return $.postJSON(\"http://localhost:8088/member/verify\", user, callback)\r\n}\r\n\r\nfunction Front() {\r\n  return (\r\n    <div id=\"front\">\r\n      <h3>Welcome</h3>\r\n      <p>We are Event Point Limited.</p>\r\n    </div>\r\n  );\r\n}\r\nclass Venue extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.id = props.id || null;\r\n    this.o = props;\r\n    if (props.toCreateBooking) {\r\n      props.toBooking2 = () => {\r\n        props.toCreateBooking(this.id)\r\n      }\r\n      this.toCreateBooking = props.toBooking2.bind(this);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.id)\r\n      return (\r\n        <div key={key++} ishidden=\"false\" className=\"block\">\r\n          <div className=\"img\"><img className=\"rounded\" src={\"http://localhost:8088/img/venue/\" + this.id + \".jpg\"} /></div>\r\n\r\n          <div className=\"info\">\r\n\r\n            <div className=\"name\"><p>{this.o.name}</p></div>\r\n            <div className=\"address\"><Icon name=\"pin_drop\" /><p>{this.o.address}</p></div>\r\n            <div className=\"type\"><p>{this.o.type}</p></div>\r\n            <div className=\"staffname\"><Icon name=\"support_agent\" /><p>{this.o.staffname}</p></div>\r\n            <div className=\"desc\"><Icon name=\"description\" /><p>{this.o.desc}</p></div>\r\n            <div className=\"capacity\"><Icon name=\"group\" /><p>{this.o.capacity}</p></div>\r\n            <div className=\"fee\"><Icon name=\"attach_money\" /><p>{this.o.fee}</p></div>\r\n\r\n            {\r\n              this.toCreateBooking && (<div className=\"book button\" t=\"main\" onClick={this.toCreateBooking}><span className=\"material-symbols-rounded\">in_home_mode</span>\r\n                <p>Book</p>\r\n              </div>\r\n              )}\r\n\r\n            {\r\n              this.toCreateBooking && (<div className=\"button time\" t=\"main\" onClick={this.toCreateBooking}><span className=\"material-symbols-rounded\">event_available</span>\r\n                <p>View Opening Hours</p>\r\n              </div>)\r\n            }\r\n\r\n\r\n          </div>\r\n\r\n        </div>\r\n      );\r\n    else\r\n      return (<div></div>);\r\n  }\r\n}\r\nfunction Venues({ toCreateBooking }) {\r\n  const [venues, setVenue] = useState();\r\n  useEffect(() => {\r\n    GetAllFrom(\"http://localhost:8088/venue/ALL\", setVenue)\r\n  }, []);\r\n\r\n  var toBk = function (id) {\r\n    toCreateBooking(id)\r\n  }\r\n  return (venues && (\r\n    <div id=\"venue\" className=\"\">\r\n      <h3>Our Venues</h3>\r\n      <div className='venue'>\r\n        {CheckList(venues, \"There are no avalible venues.\") || venues.map((object) => {\r\n          object.toCreateBooking = toBk\r\n          return new Venue(object).render()\r\n        })}\r\n      </div>\r\n    </div>\r\n  )) || (<div>Loading</div>)\r\n}\r\nfunction Guests({ toCreateGuest, toEditGuest }) {\r\n  const [guests, setGuest] = useState();\r\n\r\n  useEffect(() => {\r\n    GetAllFrom(\"http://localhost:8088/guest/ALL/\" + userid, setGuest)\r\n  }, []);\r\n\r\n  var loadGuests = () => {\r\n    setGuest(null);\r\n    GetAllFrom(\"http://localhost:8088/guest/ALL/\" + userid, (e) => {\r\n      setGuest(e)\r\n      DisplayMessage(\"List refreshed.\")\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div id=\"guest\">\r\n      <h3>Guest List</h3>\r\n      <div className=\"options\">\r\n        <Button text=\"Refresh\" action={loadGuests} type=\"sub\" />\r\n        <Button text=\"Create\" action={toCreateGuest} type=\"main\" />\r\n      </div>\r\n      {guests && <GuestList guests={guests} toCreateGuest={toCreateGuest} toEditGuest={toEditGuest} showEmpty={true} />}\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nclass Guest extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    if (props.edit) {\r\n      var edit2 = () => {\r\n        props.edit(this.props);\r\n      }\r\n      this.editGuest = edit2.bind(this)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.simple)\r\n      return (\r\n        <tr key={this.props.key}>\r\n          <th scope=\"row\">{this.props.key}</th>\r\n          <td>{this.props.name}</td>\r\n          <td>{this.props.email}</td>\r\n          <td>\r\n            <Button text=\"Edit\" action={this.editGuest} />\r\n          </td>\r\n        </tr>)\r\n    else\r\n      return (\r\n        <div key={key++} className=\"list-group-item list-group-item-action\">\r\n          <Hidden name=\"id\" value={this.props.id} />\r\n          {this.props.name}\r\n          <br />\r\n          {this.props.email}\r\n        </div>\r\n      )\r\n  }\r\n}\r\nclass GuestList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.count = 1;\r\n    this.guests = props.guests\r\n    this.showEmpty = props.showEmpty || false\r\n    if (props.toEditGuest) {\r\n      this.edit = props.toEditGuest;\r\n    }\r\n    if (props.toCreateGuest) {\r\n      this.create = props.toCreateGuest;\r\n    }\r\n  }\r\n  render() {\r\n    this.count = 1\r\n    return (\r\n      <div id={this.props.id} className={this.props.simple && \"bookingGuest\"}>\r\n        {!this.props.simple ?\r\n          (<table className=\"table\">\r\n            <thead>\r\n              <tr>\r\n                <th scope=\"col\"></th>\r\n                <th scope=\"col\">Name</th>\r\n                <th scope=\"col\">Email</th>\r\n                <th scope=\"col\"></th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {CheckList(this.guests, this.showEmpty ? \"There are no avalible guest.\" : \"\") || this.guests.map((object) => {\r\n                object.key = this.count++\r\n                object.edit = this.edit\r\n                return new Guest(object).render()\r\n              })}\r\n            </tbody>\r\n          </table>\r\n          ) : (\r\n            <div className=\"list-group\">\r\n              {CheckList(this.guests, this.showEmpty ? \"There are no avalible guest.\" : \"\") || this.guests.map((object) => {\r\n                object.simple = true\r\n                object.edit = this.edit\r\n                return new Guest(object).render()\r\n              })}\r\n            </div>\r\n          )\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\nfunction CreateBooking({ venueid, toVenue }) {\r\n  const [venue, setVenue] = useState()\r\n  const [guests, setGuest] = useState();\r\n\r\n  const [time, setTime] = useState({ isSet: false })\r\n  const [date, setValue] = useState(moment());\r\n\r\n  useEffect(() => {\r\n    GetAllFrom(\"http://localhost:8088/guest/ALL/\" + userid, setGuest).then(\r\n      () => GetOneFrom(\"http://localhost:8088/venue/read/\" + venueid, setVenue)\r\n    )\r\n  }, []);\r\n\r\n  var nextday = moment().add(1, 'day');\r\n  var nextYear = moment().endOf(\"year\")\r\n\r\n  var notValidDate = function (date) {\r\n    var notInRange = date.isBefore(nextday) || date.isAfter(nextYear)\r\n    if (venue && !notInRange) {\r\n      venue.close.forEach(d => {\r\n        var from = moment(d.from)\r\n        var to = moment(d.to)\r\n        notInRange = notInRange || !(date.isBefore(from) || date.isAfter(to))\r\n      })\r\n      var count = 0;\r\n      venue.open.forEach(d => {\r\n        if (d.from < 0) {\r\n          notInRange = notInRange || date.day() == count\r\n        }\r\n        count++\r\n      })\r\n    }\r\n    return notInRange\r\n  }\r\n  var onChange = function (date) {\r\n    var time = { isSet: true };\r\n    if (venue.open) {\r\n      if (venue.open[date.day()]) {\r\n        var t = venue.open[date.day()]\r\n        time.start = moment().hour(t.from - 1).minutes(0)\r\n        time.end = moment().hour(t.to - 1).minutes(0)\r\n        time.value = date.hour(time.start.hour() + 1).minutes(0)\r\n      }\r\n    }\r\n    setTime(time)\r\n    setValue(date)\r\n  }\r\n  var onOpen = function (date) {\r\n    setTime({ isSet: false })\r\n  }\r\n  var makeBooking = () => {\r\n\r\n    var hour = parseInt($(\"#createbooking\").find('input[name=\"session\"]').val());\r\n\r\n    if (time.value || hour) {\r\n      var guests = []\r\n      $(\"#bookingGuestRight\").find('input[name=\"id\"]').each(function () {\r\n        guests.push($(this).val())\r\n      })\r\n      var obj = { guests: guests }\r\n      $.postJSON(\"http://localhost:8088/booking/guestlist\", obj, (res) => {\r\n        obj = res;\r\n\r\n        var remark = $(\"#createbooking\").find('textarea[name=\"afewwords\"]').val();\r\n        var fee = venue.fee * hour;\r\n        var object = {\r\n          id: \"default\",\r\n          memberid: userid,\r\n          status: \"default\",\r\n          createtime: \"default\",\r\n          image: null,\r\n          guestlistid: obj.id,\r\n          remark: remark,\r\n          checkintime: null,\r\n          checkouttime: null,\r\n          startdate: time.value.format('YYYY-MM-DD'),\r\n          starthour: parseInt(time.value.format('HH')),\r\n          totalhour: hour,\r\n          fee: fee,\r\n          template: $(\"#createbooking\").find('select[name=\"template\"]').val()\r\n        }\r\n        $.postJSON(\"http://localhost:8088/booking/create\", object, (res) => {\r\n          toVenue();\r\n          DisplayMessage(\"You have successfully created a new booking.\")\r\n        })\r\n      })\r\n    }\r\n    else {\r\n      DisplayMessage(\"Please select a time for the event.\")\r\n    }\r\n  }\r\n\r\n  return ((venue && guests) && (\r\n    <div id=\"createbooking\">\r\n      <h3>Book this venue</h3>\r\n      <div className='venue booking'>\r\n        {new Venue(venue || { key: 1 }).render()}\r\n      </div>\r\n      <input type=\"hidden\" name=\"action\" value=\"createbooking\" />\r\n\r\n      <div className=\"dateTimeSession\">\r\n        <LocalizationProvider dateAdapter={AdapterMoment}>\r\n          <DatePicker\r\n            label=\"Date of the event\"\r\n            value={date}\r\n            shouldDisableDate={notValidDate}\r\n            onChange={(newValue) => onChange(newValue)}\r\n            onOpen={(newValue) => onOpen(newValue)}\r\n          />\r\n          <TimePicker\r\n            ampm={false}\r\n            label=\"Time (in hour)\"\r\n            value={time.value || moment().hour(12).minute(0)}\r\n            minTime={time.start || moment().hour(12)}\r\n            maxTime={time.end || moment().hour(12)}\r\n            timeSteps={{ minutes: 60 }}\r\n            disabled={!time.isSet}\r\n            onChange={(newValue) => setValue(newValue)}\r\n          />\r\n        </LocalizationProvider>\r\n        <div>\r\n          <span>Length of the event (in hour)</span>\r\n          <input name='session' type=\"number\" />\r\n        </div>\r\n\r\n      </div>\r\n      <div className=\"bookingGuestContainer\">\r\n        <div>\r\n          <p>Your Guests:</p>\r\n          <GuestList id=\"bookingGuestLeft\" guests={guests} showEmpty={true} simple=\"true\" />\r\n        </div>\r\n        <div>\r\n          <p>Those you want to invite:</p>\r\n          <GuestList id=\"bookingGuestRight\" simple=\"true\" />\r\n        </div>\r\n      </div>\r\n      <div>\r\n        Notification Style:\r\n        <select name=\"template\" className=\"form-select\" aria-label=\"Disabled select example\">\r\n          <option defaultValue={true} value=\"dark\">Dark Theme</option>\r\n          <option value=\"bright\">Bright Theme</option>\r\n        </select>\r\n      </div>\r\n      <div>\r\n        Add a few words:<textarea className=\"form-control\" name=\"afewwords\" type=\"text\"></textarea>\r\n      </div>\r\n      <div className='option'>\r\n        <Button type=\"main\" text=\"Create Booking\" action={makeBooking} />\r\n        <Button type=\"sub\" text=\"Check out other venues\" action={toVenue} />\r\n      </div>\r\n    </div>\r\n  )) || (<div>Loading</div>)\r\n}\r\nfunction Register({ toHome }) {\r\n\r\n  var createAccount = () => {\r\n    var fname = $(\"#register\").find('input[name=\"fname\"]').val()\r\n    var lname = $(\"#register\").find('input[name=\"lname\"]').val()\r\n    var email = $(\"#register\").find('input[name=\"email\"]').val()\r\n    var phone = $(\"#register\").find('input[name=\"phone\"]').val()\r\n    var pwd1 = $(\"#register\").find('input[name=\"pwd1\"]').val()\r\n    var pwd2 = $(\"#register\").find('input[name=\"pwd2\"]').val()\r\n    var passw = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,20}$/;\r\n\r\n    if (!fname || !lname || !email || !phone || !pwd1 || !pwd2) {\r\n      DisplayMessage(\"Please fill in all the empty field(s).\")\r\n      return\r\n    } else if (pwd1 !== pwd2) {\r\n      DisplayMessage(\"Looks like your passwords don't match.\")\r\n      return\r\n    } else if (!pwd1.match(passw)) {\r\n      DisplayMessage(\"Please setup a better password.\")\r\n      return\r\n    }\r\n\r\n    var object = {\r\n      fname: fname,\r\n      lname: lname,\r\n      email: email,\r\n      phone: phone,\r\n      pwd: pwd1\r\n    }\r\n\r\n    $.postJSON(\"http://localhost:8088/member/create\", object, (res) => {\r\n      toHome()\r\n      DisplayMessage(\"You have registered your account.\")\r\n    })\r\n  }\r\n  return (\r\n    <div id=\"register\">\r\n      <div>\r\n        <h3>Become a member</h3>\r\n      </div>\r\n\r\n      <div>\r\n        Name:\r\n        <div className=\"input-group\">\r\n          <input name=\"fname\" type=\"text\" placeholder=\"First name\" aria-label=\"First name\"\r\n            className=\"form-control\" />\r\n          <input name=\"lname\" type=\"text\" placeholder=\"Last name\" aria-label=\"Last name\"\r\n            className=\"form-control\" />\r\n        </div>\r\n      </div>\r\n\r\n      <Input text=\"Email Address:\" name=\"email\" placeholder=\"e.g. hello@outlook.com\" />\r\n      <Input text=\"Phone:\" name=\"phone\" placeholder=\"8 digit phone number\" />\r\n\r\n\r\n      <Input text=\"Password:\" name=\"pwd1\" type=\"password\" placeholder=\"your password\" />\r\n      <Input text=\"Confirm Password:\" name=\"pwd2\" type=\"password\" placeholder=\"type it again to make sure you remember\" />\r\n\r\n      <div className='helper'><i>The password should be between 6 to 20 characters which contain at least one numeric digit, one uppercase and one lowercase letter. <strong>e.g. jhWJxJHG$7y64kGM</strong></i></div>\r\n\r\n\r\n      <div className='option'>\r\n        <Button text=\"Register Account\" action={createAccount} type=\"main\" />\r\n        <Button type=\"sub\" text=\"Maybe next time\" action={toHome} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nfunction LoginPrompt({ closePrompt, setUser }) {\r\n\r\n  var login = () => {\r\n    var email = $(\"#login\").find('input[name=\"email\"]').val()\r\n    var pwd = $(\"#login\").find('input[name=\"pwd\"]').val()\r\n\r\n    if (!email) {\r\n      DisplayMessage(\"Please enter the email address of your account.\")\r\n      return;\r\n    }\r\n    else if (!pwd) {\r\n      DisplayMessage(\"Please enter your password.\")\r\n      return;\r\n    }\r\n    LoginAccount({ pwd: pwd, email: email }, (e) => {\r\n      if (e.id) {\r\n        user = e;\r\n        DisplayMessage(\"Welcome back.\")\r\n        setUser(e)\r\n      }\r\n    })\r\n  }\r\n  return (\r\n    <Prompt\r\n      closePrompt={closePrompt}\r\n      confirm={login}\r\n      cancel={closePrompt}\r\n      id=\"login\"\r\n      name=\"Login\"\r\n      content={[\"\",\r\n        <div>\r\n          <Input text=\"Email Address:\" name=\"email\" type=\"email\" />\r\n          <Input text=\"Password:\" type=\"password\" name=\"pwd\" />\r\n        </div>\r\n        , \"\"]}\r\n      cancelText=\"Return\"\r\n    />\r\n  )\r\n}\r\n\r\nclass Prompt extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.confirmText = props.confirmText || \"Confirm\";\r\n    this.cancelText = props.cancelText || \"Cancel\";\r\n    this.name = props.name || \"A Prompt\";\r\n    this.content = props.content || <div></div>;\r\n    if (props.closePrompt)\r\n      this.close = props.closePrompt.bind(this)\r\n    if (props.confirm)\r\n      this.confirm = props.confirm.bind(this)\r\n    if (props.cancel)\r\n      this.cancel = props.cancel.bind(this)\r\n    this.cancelButtonType = props.cancelButtonType || \"sub\";\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div key={key++} id={this.props.id}>\r\n        <div className=\"header\">\r\n          <h3>{this.name}</h3>\r\n          <Icon name=\"close\" onClick={this.close} />\r\n        </div>\r\n        <div className=\"content\">\r\n          {this.content}\r\n          <div className=\"options\">\r\n            <Button text={this.confirmText} action={this.confirm} type=\"main\" />\r\n            <Button text={this.cancelText} action={this.cancel} type={this.cancelButtonType} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass Booking extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.status = props.status\r\n    var statusCodes = { 0: \"Awaits Approvol\", 1: \"Awaits Payment\", 2: \"Uploaded Receipt\", 3: \"Awaits Comment\", 4: \"Commented\" }\r\n    this.statusCode = statusCodes[props.status]\r\n    \r\n    if (props.edit) {\r\n      var edit2 = () => {\r\n        props.edit(this.props);\r\n      }\r\n      this.edit = edit2.bind(this)\r\n    }\r\n    if (props.toUpdateBookingRemark) {\r\n      var edit3 = () => {\r\n        props.toUpdateBookingRemark(this.props);\r\n      }\r\n      this.toUpdateBookingRemark = edit3.bind(this)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <tr key={this.props.key}>\r\n        <th scope=\"row\">{this.props.key}</th>\r\n        <td>{this.props.createtime}</td>\r\n        <td>{this.statusCode}</td>\r\n        <td>\r\n          {this.status == 0 && <Button disabled={true} text=\"Upload Receipt\" />}\r\n          {this.status == 1 && <Button action={this.edit} text=\"Upload Receipt\" />}\r\n          {this.status == 2 && <Button disabled={true} text=\"Upload Receipt\" />}\r\n          {this.status == 3 && <Button action={this.toUpdateBookingRemark} text=\"Leave a Comment\" />}\r\n          {this.status == 4 && <Button disabled={true} text=\"Leave a Comment\" />}\r\n        </td>\r\n\r\n      </tr>)\r\n  }\r\n}\r\nclass BookingList extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.count = 1;\r\n    this.bookings = props.bookings\r\n\r\n    this.showEmpty = props.showEmpty || false\r\n\r\n    if (props.toUpdateBooking) {\r\n      this.edit = props.toUpdateBooking;\r\n    }\r\n    if (props.toUpdateBookingRemark) {\r\n      this.toUpdateBookingRemark = props.toUpdateBookingRemark;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var count = 1\r\n    return (\r\n      <div id={this.props.id}>\r\n        <table className=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\"></th>\r\n              <th scope=\"col\">Created on</th>\r\n              <th scope=\"col\">Status</th>\r\n              <th scope=\"col\"></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {CheckList(this.bookings, this.showEmpty ? \"There are no booking record.\" : \"\") || this.bookings.map((object) => {\r\n              object.key = count++\r\n              object.edit = this.edit\r\n              object.toUpdateBookingRemark = this.toUpdateBookingRemark\r\n              return new Booking(object).render()\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nfunction EmailTest() {\r\n\r\n  var sendEmail = () => {\r\n    var to = $(\"#emailtest\").find('input[name=\"to\"]').val()\r\n    var subject = $(\"#emailtest\").find('input[name=\"subject\"]').val()\r\n    var head = $(\"#emailtest\").find('input[name=\"head\"]').val()\r\n    var body = $(\"#emailtest\").find('textarea[name=\"body\"]').val()\r\n    var date = $(\"#emailtest\").find('input[name=\"date\"]').val()\r\n    var timeLoc = $(\"#emailtest\").find('input[name=\"timeLoc\"]').val()\r\n\r\n    $.postJSON(\"http://localhost:8088/email\", { to: to, subject: subject, head: head, body: body, date: date, timeLoc: timeLoc }, (e) => {\r\n      console.log(e)\r\n      DisplayMessage(\"You have sent an email.\");\r\n    })\r\n  }\r\n  return (\r\n    <div id=\"emailtest\">\r\n      <Input text=\"TO\" type=\"email\" name=\"to\" value=\"itisonho@outlook.com\"/>\r\n      <Input text=\"Subject\" name=\"subject\" value=\"A New Event\"/>\r\n      <Input text=\"Header\" name=\"head\" value=\"Hello Chan Tai Man!\"/>\r\n      Body:\r\n      <textarea class=\"form-control\" text=\"Body\" name=\"body\">Just a reminder for your upcoming event. You can see the details below</textarea>\r\n      <Input text=\"Date\" name=\"date\" value=\"12 MAY\"/>\r\n      <Input text=\"Time and Address\" name=\"timeLoc\" value=\"3pm - 5pm</br>Happy Apple Farm\" />\r\n      <Button action={sendEmail} text=\"Send\" />\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction Bookings({ toUpdateBooking , toUpdateBookingRemark}) {\r\n  const [bookings, setBooking] = useState();\r\n\r\n  useEffect(() => {\r\n    GetAllFrom(\"http://localhost:8088/booking/ALL/\" + userid, setBooking)\r\n  }, []);\r\n\r\n  var loadGuests = () => {\r\n    setBooking(null);\r\n    GetAllFrom(\"http://localhost:8088/booking/ALL/\" + userid, (e) => {\r\n      setBooking(e)\r\n      DisplayMessage(\"List refreshed.\")\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div id=\"booking\">\r\n      <h3>Booking List</h3>\r\n      <div className=\"options\">\r\n        <Button text=\"Refresh\" action={loadGuests} type=\"sub\" />\r\n      </div>\r\n      {bookings && <BookingList toUpdateBookingRemark={toUpdateBookingRemark} toUpdateBooking={toUpdateBooking} bookings={bookings} showEmpty={true} />}\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nasync function uploadFile(name) {\r\n  let formData = new FormData();\r\n  formData.append(\"file\", $(\"#receiptImage\").prop('files')[0])\r\n  formData.append(\"name\", name);;\r\n  let response = await fetch('http://localhost:8088/upload', {\r\n    method: \"POST\",\r\n    body: formData\r\n  });\r\n  return response\r\n}\r\n\r\nfunction CreateGuestPrompt({ closePrompt }) {\r\n\r\n  var createGuest = () => {\r\n\r\n    var name = $(\"#createGuest\").find('input[name=\"name\"]').val()\r\n    var email = $(\"#createGuest\").find('input[name=\"email\"]').val()\r\n\r\n    if (!email) {\r\n      DisplayMessage(\"Please enter the email of the Guest.\")\r\n      return;\r\n    }\r\n    else if (!name) {\r\n      DisplayMessage(\"Please enter the name of the Guest.\")\r\n      return;\r\n    }\r\n    $.postJSON(\"http://localhost:8088/guest/create\", { memberid: userid, name: name, email: email }, (res) => {\r\n      closePrompt()\r\n      DisplayMessage(\"You have created a guest.\")\r\n    })\r\n  }\r\n  return (\r\n    <Prompt\r\n      closePrompt={closePrompt}\r\n      confirm={createGuest}\r\n      cancel={closePrompt}\r\n      id=\"createGuest\"\r\n      name=\"Create guest\"\r\n      content={[\"\",\r\n        <div>\r\n          <Input text=\"Name:\" name=\"name\" />\r\n          <Input text=\"Email Address:\" name=\"email\" type=\"email\" />\r\n        </div>\r\n        , \"\"]}\r\n      confirmText=\"Create\" />\r\n  )\r\n}\r\nfunction EditGuestPrompt({ closePrompt, guest }) {\r\n\r\n  var editGuest = () => {\r\n\r\n    var name = $(\"#editGuest\").find('input[name=\"name\"]').val()\r\n    var email = $(\"#editGuest\").find('input[name=\"email\"]').val()\r\n\r\n    if (!email) {\r\n      DisplayMessage(\"Please enter the email of the Guest.\")\r\n      return;\r\n    }\r\n    else if (!name) {\r\n      DisplayMessage(\"Please enter the name of the Guest.\")\r\n      return;\r\n    }\r\n    $.putJSON(\"http://localhost:8088/guest/update\", { id: guest.id, memberid: userid, name: name, email: email }, (res) => {\r\n      closePrompt()\r\n      DisplayMessage(\"You have updated the record.\")\r\n    })\r\n  }\r\n  var deleteGuest = () => {\r\n\r\n    $.getJSON(\"http://localhost:8088/guest/delete/\" + guest.id, (res) => {\r\n      closePrompt()\r\n      DisplayMessage(\"You have deleted the guest record.\")\r\n    })\r\n  }\r\n\r\n  return (\r\n    guest && <Prompt\r\n      closePrompt={closePrompt}\r\n      confirm={editGuest}\r\n      cancel={deleteGuest}\r\n      id=\"editGuest\"\r\n      name=\"Edit guest\"\r\n      content={[\"\",\r\n        <div>\r\n          <Input text=\"Name:\" name=\"name\" value={guest.name} />\r\n          <Input text=\"Email Address:\" value={guest.email} name=\"email\" type=\"email\" />\r\n        </div>\r\n        , \"\"]}\r\n      cancelText=\"Delete\"\r\n      cancelButtonType=\"no\"\r\n    />\r\n  )\r\n}\r\nfunction UpdateBookingPrompt({ closePrompt, booking }) {\r\n  var update = () => {\r\n\r\n    var img = $(\"#updateBooking\").find('input[name=\"img\"]').val()\r\n\r\n    if (!img) {\r\n      DisplayMessage(\"You haven't upload the receipt yet.\")\r\n      return;\r\n    }\r\n\r\n    uploadFile(booking.id).then(res => {\r\n      if (res.status == 200) {\r\n        $.postJSON(\"http://localhost:8088/booking/receipt\", { id: booking.id, status: parseInt(booking.status) + 1, image: booking.id + \".jpg\" }, (e) => {\r\n          console.log(e)\r\n          closePrompt()\r\n          DisplayMessage(\"You have updated the booking status.\")\r\n        })\r\n      }\r\n    })\r\n\r\n  }\r\n  return (\r\n    <Prompt\r\n      closePrompt={closePrompt}\r\n      confirm={update}\r\n      cancel={closePrompt}\r\n      id=\"updateBooking\"\r\n      name={\"Total: \" + booking.fee}\r\n      content={[\"\",\r\n        <div>\r\n          <p>You can pay us via our FPS account: <strong>1233212345</strong></p>\r\n          <p>Or our bank account: <strong>(Citi 123) 990 1234 5678</strong></p>\r\n          <p>and upload <strong>a clear image</strong> of the receipt to let us know</p>\r\n          <p></p>\r\n          <input type=\"file\" id=\"receiptImage\" name=\"img\" accept=\"image/*\"></input>\r\n        </div>\r\n        , \"\"]}\r\n      confirmText=\"Submit the recepit\" />\r\n  )\r\n}\r\nfunction BookingRemarkPrompt({ closePrompt, booking }) {\r\n  var update = () => {\r\n\r\n    var remark = $(\"#updateBookingComment\").find('textarea[name=\"review\"]').val()\r\n\r\n    if (!remark) {\r\n      DisplayMessage(\"You haven't written anything yet.\")\r\n      return;\r\n    }\r\n\r\n        $.postJSON(\"http://localhost:8088/booking/remark\", { id: booking.id, status: parseInt(booking.status) + 1, remark: remark }, (e) => {\r\n          console.log(e)\r\n          closePrompt()\r\n          DisplayMessage(\"You have updated the booking status.\")\r\n        })\r\n      }\r\n  return (\r\n    <Prompt\r\n      closePrompt={closePrompt}\r\n      confirm={update}\r\n      cancel={closePrompt}\r\n      id=\"updateBookingComment\"\r\n      name={\"Leave a comment\"}\r\n      content={[\"\",\r\n        <div>\r\n          <p>What do you think about our service? Leave a comment below.</p>\r\n          <br/>\r\n          <textarea class=\"form-control\" text=\"Body\" name=\"review\"></textarea>\r\n      \r\n        </div>\r\n        , \"\"]}\r\n      confirmText=\"Submit the review\" />\r\n  )\r\n}\r\n\r\nexport default function MainContainer() {\r\n\r\n  var getUser = () => {\r\n    var user = {\r\n      id: Cookies.get('userid'),\r\n      name: Cookies.get('username'),\r\n      email: Cookies.get('useremail'),\r\n      phone: Cookies.get('userphone')\r\n    };\r\n    if (user.id) {\r\n      return user\r\n    }\r\n    return null\r\n  }\r\n  const [user, setUser] = useState(\r\n    getUser()\r\n  )\r\n  var loginSetUser = (user) => {\r\n    if (user && user.id) {\r\n      userid = user.id\r\n      Cookies.set('userid', user.id, { SameSite: \"None\" })\r\n      Cookies.set('username', user.fname + \" \" + user.lname, { SameSite: \"None\" })\r\n      Cookies.set('useremail', user.email, { SameSite: \"None\" })\r\n      Cookies.set('userphone', user.phone, { SameSite: \"None\" })\r\n    }\r\n    setUser(user);\r\n    window.location.href = \"http://localhost:3000\";\r\n  }\r\n  var logout = () => {\r\n    Cookies.remove('userid')\r\n    Cookies.remove('username')\r\n    Cookies.remove('useremail')\r\n    Cookies.remove('userphone')\r\n    window.location.href = \"http://localhost:3000\";\r\n  }\r\n\r\n  const [bookingVID, setBVID] = useState();\r\n  const [guest, setGUEST] = useState(null);\r\n  const [booking, setBOOKING] = useState(null);\r\n\r\n  const [pch, setPC] = useState(false);\r\n\r\n  const [lph, setLP] = useState(false);\r\n  const [cgh, setCG] = useState(false);\r\n  const [egh, setEG] = useState(false);\r\n  const [ubh, setUB] = useState(false);\r\n  const [brh, setBR] = useState(false);\r\n\r\n  var toLoginPrompt = () => openPrompt(setLP)\r\n  var toEditGuest = (guest) => {\r\n    setGUEST(guest)\r\n    openPrompt(setEG)\r\n  }\r\n  var toUpdateBooking = (booking) => {\r\n    setBOOKING(booking)\r\n    openPrompt(setUB)\r\n  }\r\n  var toUpdateBookingRemark = (booking) => {\r\n    setBOOKING(booking)\r\n    openPrompt(setBR)\r\n  }\r\n  var toCreateGuest = () => openPrompt(setCG)\r\n\r\n  function closePrompt(func) {\r\n    func(false)\r\n    setPC(false);\r\n  }\r\n  function openPrompt(func) {\r\n    var list = [setLP, setCG, setEG]\r\n    list.forEach((e) => e(false))\r\n    func(true)\r\n    setPC(true);\r\n  }\r\n\r\n  const [cbh, setCB] = useState(false);\r\n  const [vh, setV] = useState(false);\r\n  const [fh, setF] = useState(true);\r\n  const [gh, setG] = useState(false);\r\n  const [rh, setR] = useState(false);\r\n  const [bh, setB] = useState(false);\r\n  const [eh, setE] = useState(false);\r\n\r\n  function open(func) {\r\n    var list = [setCB, setV, setF, setG, setG, setR, setB, setE]\r\n    list.forEach((e) => e(false))\r\n    func(true)\r\n  }\r\n  var toCreateBooking = function (id) {\r\n    setBVID(id)\r\n    open(setCB)\r\n  }\r\n  var toEmail = () => open(setE)\r\n  var toVenue = () => open(setV)\r\n  var toHome = () => open(setF)\r\n  var toGuest = () => open(setG)\r\n  var toRegister = () => open(setR)\r\n  var toBooking = () => open(setB)\r\n\r\n  return (\r\n    <div id=\"main\">\r\n\r\n      {pch && <div className=\"prompt-container\">\r\n        {brh && <BookingRemarkPrompt booking={booking} closePrompt={() => { closePrompt(setBR) }} />}\r\n        {ubh && <UpdateBookingPrompt booking={booking} closePrompt={() => { closePrompt(setUB) }} />}\r\n        {lph && <LoginPrompt setUser={loginSetUser} closePrompt={() => { closePrompt(setLP) }} />}\r\n        {cgh && <CreateGuestPrompt closePrompt={() => { closePrompt(setCG) }} />}\r\n        {egh && guest && <EditGuestPrompt guest={guest} closePrompt={() => { closePrompt(setEG) }} />}\r\n      </div>}\r\n      <Nav toEmail={toEmail} toBooking={toBooking} logout={logout} user={user} toHome={toHome} toVenue={toVenue} toGuest={toGuest} toRegister={toRegister} toLogin={toLoginPrompt} />\r\n      <div className=\"main-container\">\r\n        {eh && <EmailTest />}\r\n        {bh && <Bookings toUpdateBookingRemark={toUpdateBookingRemark} toUpdateBooking={toUpdateBooking} />}\r\n        {rh && <Register toHome={toHome} />}\r\n        {gh && <Guests toCreateGuest={toCreateGuest} toEditGuest={toEditGuest} />}\r\n        {cbh && bookingVID && <CreateBooking toVenue={toVenue} venueid={bookingVID} />}\r\n        {fh && <Front />}\r\n        {vh && <Venues toCreateBooking={toCreateBooking} />}\r\n      </div>\r\n      <div id=\"message\">\r\n        <div>\r\n          Test\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","C:\\Users\\szcch\\Documents\\GitHub\\ITP4511_ass\\project_source[c]\\src\\Nav\\Nav.jsx",["45","46","47","48","49","50","51"],[],"import React from \"react\";\r\nimport Cookies from 'js-cookie';\r\nimport './Nav.css';\r\nimport * as f from '../_functions.js';\r\n\r\nvar key = 0;\r\nclass NavLink extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.key = props.key;\r\n        this.name = props.name;\r\n        this.action = props.action || \"front\";\r\n        if (props.switchPage)\r\n            this.switchPage = props.switchPage.bind(this);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <a key={key++} className=\"nav-link\" onClick={this.switchPage} href=\"#\">{this.name}</a>\r\n        );\r\n    }\r\n}\r\nclass NavOption extends NavLink {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <li key={key++} className=\"nav-item\">\r\n                {super.render()}\r\n            </li>\r\n        );\r\n    }\r\n}\r\nclass UserCorner extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.list = props.list || []\r\n        this.username = props.username || \"Guest\";\r\n    }\r\n    render() {\r\n        return (\r\n            <li className=\"nav-item dropdown ml-auto\">\r\n                <a className=\"nav-link dropdown-toggle vcentered\" href=\"#\" id=\"navbarDropdownMenuLink\" role=\"button\" data-toggle=\"dropdown\"\r\n                    aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                    <div>{this.username}</div>\r\n                    <span className=\"fill material-symbols-rounded\">account_circle</span>\r\n                </a>\r\n                <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdownMenuLink\">\r\n                    {this.list.map((object) => {\r\n                        return new NavLink(object).render()\r\n                    })}\r\n                </div>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nexport default function Nav({toEmail, logout, user, toHome, toBooking, toVenue, toGuest, toRegister, toLogin }) {\r\n\r\n    var dropDownList = [\r\n        { name: \"Register Account\", action: \"register\", switchPage: toRegister },\r\n    ]\r\n    if (!user || !user.id)\r\n        dropDownList.push({ name: \"Login\", action: \"login\", switchPage: toLogin })\r\n\r\n    if (user && user.id) {\r\n        dropDownList = dropDownList.concat([\r\n            { name: \"Logout\", action: \"logout\", switchPage: logout }\r\n        ])\r\n    }\r\n    dropDownList.push({ name: \"Send Email\", action: \"email\", switchPage: toEmail })\r\n\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg\">\r\n            <a onClick={toHome} className=\"navbar-brand vcentered\" href=\"#\"><img src=\"http://localhost:9000/logo\" /></a>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarText\"\r\n                aria-controls=\"navbarText\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarText\">\r\n                <ul className=\"navbar-nav w-100 vcentered\">\r\n                    <NavOption switchPage={toHome} name=\"Home\" action=\"front\" />\r\n                    <NavOption switchPage={toVenue} name=\"Venue\" action=\"venue\" />\r\n                    {user && user.id && <NavOption switchPage={toBooking} name=\"Booking\" action=\"booking\" />}\r\n                    {user && user.id && <NavOption switchPage={toGuest} name=\"Guest\" action=\"guest\" />}\r\n                    <UserCorner username={(user && user.name) || \"Guest\"} list={dropDownList} />\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    );\r\n}","C:\\Users\\szcch\\Documents\\GitHub\\ITP4511_ass\\project_source[c]\\src\\_functions.js",[],[],{"ruleId":"52","severity":1,"message":"53","line":3,"column":8,"nodeType":"54","messageId":"55","endLine":3,"endColumn":9},{"ruleId":"52","severity":1,"message":"56","line":5,"column":8,"nodeType":"54","messageId":"55","endLine":5,"endColumn":15},{"ruleId":"52","severity":1,"message":"57","line":2,"column":8,"nodeType":"54","messageId":"55","endLine":2,"endColumn":12},{"ruleId":"52","severity":1,"message":"58","line":15,"column":5,"nodeType":"54","messageId":"55","endLine":15,"endColumn":9},{"ruleId":"59","severity":1,"message":"60","line":61,"column":58,"nodeType":"61","messageId":"62","endLine":61,"endColumn":60},{"ruleId":"63","severity":1,"message":"64","line":195,"column":32,"nodeType":"65","endLine":195,"endColumn":119},{"ruleId":"66","severity":1,"message":"67","line":371,"column":6,"nodeType":"68","endLine":371,"endColumn":8,"suggestions":"69"},{"ruleId":"59","severity":1,"message":"60","line":387,"column":49,"nodeType":"61","messageId":"62","endLine":387,"endColumn":51},{"ruleId":"59","severity":1,"message":"60","line":686,"column":24,"nodeType":"61","messageId":"62","endLine":686,"endColumn":26},{"ruleId":"59","severity":1,"message":"60","line":687,"column":24,"nodeType":"61","messageId":"62","endLine":687,"endColumn":26},{"ruleId":"59","severity":1,"message":"60","line":688,"column":24,"nodeType":"61","messageId":"62","endLine":688,"endColumn":26},{"ruleId":"59","severity":1,"message":"60","line":689,"column":24,"nodeType":"61","messageId":"62","endLine":689,"endColumn":26},{"ruleId":"59","severity":1,"message":"60","line":690,"column":24,"nodeType":"61","messageId":"62","endLine":690,"endColumn":26},{"ruleId":"59","severity":1,"message":"60","line":899,"column":22,"nodeType":"61","messageId":"62","endLine":899,"endColumn":24},{"ruleId":"52","severity":1,"message":"56","line":2,"column":8,"nodeType":"54","messageId":"55","endLine":2,"endColumn":15},{"ruleId":"52","severity":1,"message":"70","line":4,"column":13,"nodeType":"54","messageId":"55","endLine":4,"endColumn":14},{"ruleId":"71","severity":1,"message":"72","line":19,"column":13,"nodeType":"65","endLine":19,"endColumn":84},{"ruleId":"73","severity":1,"message":"74","line":24,"column":5,"nodeType":"75","messageId":"76","endLine":26,"endColumn":6},{"ruleId":"71","severity":1,"message":"72","line":44,"column":17,"nodeType":"65","endLine":45,"endColumn":64},{"ruleId":"71","severity":1,"message":"72","line":76,"column":13,"nodeType":"65","endLine":76,"endColumn":77},{"ruleId":"63","severity":1,"message":"64","line":76,"column":77,"nodeType":"65","endLine":76,"endColumn":117},"no-unused-vars","'$' is defined but never used.","Identifier","unusedVar","'Cookies' is defined but never used.","'logo' is defined but never used.","'user' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'venueid'. Either include it or remove the dependency array.","ArrayExpression",["77"],"'f' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",{"desc":"78","fix":"79"},"Update the dependencies array to be: [venueid]",{"range":"80","text":"81"},[10518,10520],"[venueid]"]